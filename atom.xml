<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YOJIAKU</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yojiaku.github.io/"/>
  <updated>2018-07-05T12:19:41.086Z</updated>
  <id>https://yojiaku.github.io/</id>
  
  <author>
    <name>yojiaku</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test_my_site</title>
    <link href="https://yojiaku.github.io/2018/07/05/test-my-site/"/>
    <id>https://yojiaku.github.io/2018/07/05/test-my-site/</id>
    <published>2018-07-05T12:19:41.000Z</published>
    <updated>2018-07-05T12:19:41.086Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yojiaku.github.io/2018/07/05/hello-world/"/>
    <id>https://yojiaku.github.io/2018/07/05/hello-world/</id>
    <published>2018-07-05T12:17:30.782Z</published>
    <updated>2018-01-31T08:40:41.484Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>斐波那契查找</title>
    <link href="https://yojiaku.github.io/2018/06/30/Fibonacci_Search/"/>
    <id>https://yojiaku.github.io/2018/06/30/Fibonacci_Search/</id>
    <published>2018-06-30T13:45:29.000Z</published>
    <updated>2018-07-19T16:13:32.280Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;斐波那契查找就是在二分查找的基础上根据斐波那契数列进行分割的。在斐波那契数列找一个等于略大于查找表中元素个数的数F[n]，将原查找表扩展为长度为F&lt;a
        
      
    
    </summary>
    
    
      <category term="算法" scheme="https://yojiaku.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="查找" scheme="https://yojiaku.github.io/tags/%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>插值查找</title>
    <link href="https://yojiaku.github.io/2018/06/29/Interpolation_Search/"/>
    <id>https://yojiaku.github.io/2018/06/29/Interpolation_Search/</id>
    <published>2018-06-29T13:03:24.000Z</published>
    <updated>2018-07-19T16:12:45.090Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;我们很容易理解折半查找（二分查找），那么在折半查找原理的基础上我们会进一步思考，为什么一定要折半呢，而不是折四分之一，或者其他呢？比如说我们要搜索的值更接近最后一个元素，为什么还要从中间开始搜索，而不是从较后面的一部分开始搜索呢？因此研究学者们在折半查找的基础上进行了改进，
        
      
    
    </summary>
    
    
      <category term="算法" scheme="https://yojiaku.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="查找" scheme="https://yojiaku.github.io/tags/%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>八皇后问题</title>
    <link href="https://yojiaku.github.io/2018/06/28/Eight_queens/"/>
    <id>https://yojiaku.github.io/2018/06/28/Eight_queens/</id>
    <published>2018-06-28T14:03:45.000Z</published>
    <updated>2018-07-19T16:12:17.262Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;八皇后问题，是一个古老而著名的问题，是回溯算法的典型案例。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：在8×8格的国际象棋上摆放八个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。
        
      
    
    </summary>
    
    
      <category term="算法" scheme="https://yojiaku.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="应用" scheme="https://yojiaku.github.io/tags/%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>LZW压缩算法</title>
    <link href="https://yojiaku.github.io/2018/06/27/LZW_Flow_Chart/"/>
    <id>https://yojiaku.github.io/2018/06/27/LZW_Flow_Chart/</id>
    <published>2018-06-27T14:34:45.000Z</published>
    <updated>2018-07-19T16:11:41.362Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;LZW压缩算法是一种压缩方法，由Lemple-Ziv-Welch 三人共同创造，用他们的名字命名。&lt;/p&gt;
&lt;h1 id=&quot;算法概念&quot;&gt;&lt;a href=&quot;#算法概念&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="算法" scheme="https://yojiaku.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="压缩" scheme="https://yojiaku.github.io/tags/%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>哈希方法</title>
    <link href="https://yojiaku.github.io/2018/06/26/Conflict_Resolution/"/>
    <id>https://yojiaku.github.io/2018/06/26/Conflict_Resolution/</id>
    <published>2018-06-26T14:32:34.000Z</published>
    <updated>2018-07-19T16:11:08.625Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;链接法（开散列方法）&quot;&gt;&lt;a href=&quot;#链接法（开散列方法）&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="算法" scheme="https://yojiaku.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="哈希" scheme="https://yojiaku.github.io/tags/%E5%93%88%E5%B8%8C/"/>
    
  </entry>
  
  <entry>
    <title>哈希方法</title>
    <link href="https://yojiaku.github.io/2018/06/25/Construction_Method/"/>
    <id>https://yojiaku.github.io/2018/06/25/Construction_Method/</id>
    <published>2018-06-25T14:28:23.000Z</published>
    <updated>2018-07-19T16:10:44.417Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;直接定址法&quot;&gt;&lt;a href=&quot;#直接定址法&quot; class=&quot;headerlink&quot; title=&quot;直接定址法&quot;&gt;&lt;/a&gt;直接定址法&lt;/h1&gt;&lt;p&gt;直接定址法是以数据元素关键字k本身或它的线性函数作为它的哈希地址，即：H（k）=k或 H（k）=a×k+b ；
        
      
    
    </summary>
    
    
      <category term="算法" scheme="https://yojiaku.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="哈希" scheme="https://yojiaku.github.io/tags/%E5%93%88%E5%B8%8C/"/>
    
  </entry>
  
  <entry>
    <title>图</title>
    <link href="https://yojiaku.github.io/2018/06/24/Graph/"/>
    <id>https://yojiaku.github.io/2018/06/24/Graph/</id>
    <published>2018-06-24T14:26:17.000Z</published>
    <updated>2018-07-19T16:10:11.903Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;图的定义&quot;&gt;&lt;a href=&quot;#图的定义&quot; class=&quot;headerlink&quot; title=&quot;图的定义&quot;&gt;&lt;/a&gt;图的定义&lt;/h1&gt;&lt;p&gt;图是由顶点的有穷非空集合和顶点之间边的集合组成。图可以用G = ( V , E
        
      
    
    </summary>
    
    
      <category term="算法" scheme="https://yojiaku.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图" scheme="https://yojiaku.github.io/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>散列</title>
    <link href="https://yojiaku.github.io/2018/06/23/Hash/"/>
    <id>https://yojiaku.github.io/2018/06/23/Hash/</id>
    <published>2018-06-23T14:24:15.000Z</published>
    <updated>2018-07-19T16:09:45.825Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;通过一些计算，即散列函数（Hash
        
      
    
    </summary>
    
    
      <category term="算法" scheme="https://yojiaku.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="散列" scheme="https://yojiaku.github.io/tags/%E6%95%A3%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>散列方法</title>
    <link href="https://yojiaku.github.io/2018/06/22/Hash_Function/"/>
    <id>https://yojiaku.github.io/2018/06/22/Hash_Function/</id>
    <published>2018-06-22T14:03:13.000Z</published>
    <updated>2018-07-19T16:09:20.989Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;除法散列法&quot;&gt;&lt;a href=&quot;#除法散列法&quot; class=&quot;headerlink&quot; title=&quot;除法散列法&quot;&gt;&lt;/a&gt;除法散列法&lt;/h1&gt;&lt;p&gt;设&lt;code&gt;hash(key)=key mod
        
      
    
    </summary>
    
    
      <category term="算法" scheme="https://yojiaku.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="散列" scheme="https://yojiaku.github.io/tags/%E6%95%A3%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>堆</title>
    <link href="https://yojiaku.github.io/2018/06/21/Heap/"/>
    <id>https://yojiaku.github.io/2018/06/21/Heap/</id>
    <published>2018-06-21T13:02:13.000Z</published>
    <updated>2018-07-19T16:08:47.314Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;堆通是一种近似的完全二叉树，树上每一个结点对应数组中的一个元素。除最底层外，该树是完全充满的，且最底层的元素从左往右填入。&lt;/p&gt;
&lt;p&gt;设计目的&lt;br&gt;:
        
      
    
    </summary>
    
    
      <category term="算法" scheme="https://yojiaku.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="堆" scheme="https://yojiaku.github.io/tags/%E5%A0%86/"/>
    
      <category term="数据结构" scheme="https://yojiaku.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>队列</title>
    <link href="https://yojiaku.github.io/2018/06/20/Queue/"/>
    <id>https://yojiaku.github.io/2018/06/20/Queue/</id>
    <published>2018-06-20T15:02:20.000Z</published>
    <updated>2018-07-19T16:08:16.276Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;队列的定义&quot;&gt;&lt;a href=&quot;#队列的定义&quot; class=&quot;headerlink&quot; title=&quot;队列的定义&quot;&gt;&lt;/a&gt;队列的定义&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="算法" scheme="https://yojiaku.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://yojiaku.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="队列" scheme="https://yojiaku.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>广度优先搜索算法</title>
    <link href="https://yojiaku.github.io/2018/06/19/BFS/"/>
    <id>https://yojiaku.github.io/2018/06/19/BFS/</id>
    <published>2018-06-19T15:00:23.000Z</published>
    <updated>2018-07-19T16:07:26.091Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;广度优先搜索算法（Breadth First
        
      
    
    </summary>
    
    
      <category term="算法" scheme="https://yojiaku.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="搜索" scheme="https://yojiaku.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>深度优先搜索</title>
    <link href="https://yojiaku.github.io/2018/06/18/DFS/"/>
    <id>https://yojiaku.github.io/2018/06/18/DFS/</id>
    <published>2018-06-18T14:00:35.000Z</published>
    <updated>2018-07-19T16:06:58.403Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;深度优先搜索属于图算法的一种，英文缩写为DFS即Depth First Search。其过程简要来说是对每一个可能的分支路径深入到不能再深入为止，而且每个节点只能访问一次。深度优先搜索的搜索过程类似树的先序遍历，也叫回溯法。&lt;/p&gt;
&lt;h1
        
      
    
    </summary>
    
    
      <category term="算法" scheme="https://yojiaku.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="搜索" scheme="https://yojiaku.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>桶排序 (Bucket sort)</title>
    <link href="https://yojiaku.github.io/2018/06/17/BucketSort/"/>
    <id>https://yojiaku.github.io/2018/06/17/BucketSort/</id>
    <published>2018-06-17T14:05:35.000Z</published>
    <updated>2018-07-19T15:43:46.628Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;桶排序 (Bucket
        
      
    
    </summary>
    
    
      <category term="算法" scheme="https://yojiaku.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://yojiaku.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>分块查找（Blocking Search）</title>
    <link href="https://yojiaku.github.io/2018/06/16/Blocking_Search/"/>
    <id>https://yojiaku.github.io/2018/06/16/Blocking_Search/</id>
    <published>2018-06-16T14:51:35.000Z</published>
    <updated>2018-07-19T15:35:05.669Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;分块查找，又称索引顺序查找。它是一种性能介于顺序查找和二分查找之间的改进方法。它是为了找到 &lt;strong&gt;二分查找的高效但需要顺序存储&lt;/strong&gt; 和 &lt;strong&gt;顺序查找可以解决元素动态变化但效率低下&lt;/strong&gt; 之间更平衡的方法。&lt;/p&gt;
&lt;h2
        
      
    
    </summary>
    
    
      <category term="算法" scheme="https://yojiaku.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="查找" scheme="https://yojiaku.github.io/tags/%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>Prim最小生成树算法</title>
    <link href="https://yojiaku.github.io/2018/06/15/Prim_Minimum_Spanning_Tree/"/>
    <id>https://yojiaku.github.io/2018/06/15/Prim_Minimum_Spanning_Tree/</id>
    <published>2018-06-15T12:34:05.000Z</published>
    <updated>2018-07-19T15:34:27.473Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Prim最小生成树算法搜索到的边子集所构成的树中，不但包括了连通图里的所有顶点，且其所有边的权值之和亦为最小。该算法于1930年由捷克数学家沃伊捷赫·亚尔尼克发现；并在1957年由美国计算机科学家罗伯特·普里姆独立发现；1959年，艾兹格·迪科斯彻再次发现了该算法。因此，在
        
      
    
    </summary>
    
    
      <category term="算法" scheme="https://yojiaku.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="最小生成树" scheme="https://yojiaku.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>区块链的技术原理和意义（论文祥读）</title>
    <link href="https://yojiaku.github.io/2018/06/10/blockchainPage1/"/>
    <id>https://yojiaku.github.io/2018/06/10/blockchainPage1/</id>
    <published>2018-06-10T15:52:06.000Z</published>
    <updated>2018-07-19T15:34:30.705Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;文章重点&quot;&gt;&lt;a href=&quot;#文章重点&quot; class=&quot;headerlink&quot; title=&quot;文章重点&quot;&gt;&lt;/a&gt;文章重点&lt;/h3&gt;&lt;p&gt;区块链技术原理、数据结构、运行机制、区块链的分叉&lt;/p&gt;
&lt;h3 id=&quot;区块链技术原理&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="区块链" scheme="https://yojiaku.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="论文" scheme="https://yojiaku.github.io/tags/%E8%AE%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm-二维数组中的查找-BinarySearch</title>
    <link href="https://yojiaku.github.io/2018/03/28/BinarySearch/"/>
    <id>https://yojiaku.github.io/2018/03/28/BinarySearch/</id>
    <published>2018-03-28T05:17:34.000Z</published>
    <updated>2018-03-28T05:23:32.080Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;二维数组中的查找&quot;&gt;&lt;a href=&quot;#二维数组中的查找&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="BinarySearch Algorithm" scheme="https://yojiaku.github.io/tags/BinarySearch-Algorithm/"/>
    
  </entry>
  
</feed>
